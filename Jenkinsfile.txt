// Jenkinsfile (Declarative Pipeline) - Updated for CI/CD

pipeline {
    agent any

    environment {
        VIRTUAL_ENV_NAME = 'venv' // Name for our Python virtual environment
        // Define the path to your simulated staging environment
        // IMPORTANT: Choose a path accessible by the Jenkins user/container
        // For Docker, this path is relative to the *container's* filesystem,
        // unless you bind-mount it from the host. For simplicity, we'll
        // assume it's a directory within the Jenkins home or a temporary one.
        // Let's use a temporary directory for now for simplicity, or a known path.
        // For a true "staging environment" simulation, you might want to bind-mount
        // a host directory into your Jenkins container for this.
        // For this example, we'll create a directory within the Jenkins workspace
        // or a /tmp/staging-app for a more "external" feel within the container.
        // Let's use a path outside the immediate workspace for better simulation.
        // For Docker, a good place might be /tmp/staging-area or /var/jenkins_home/staging-area
        // Let's use /var/jenkins_home/staging-area, which will be persistent if jenkins_home is a volume.
        STAGING_DIR = "${env.JENKINS_HOME}/staging-area"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checking out source code...'
                    checkout scm
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo 'Setting up Python virtual environment and installing dependencies...'
                    sh "python3 -m venv ${env.VIRTUAL_ENV_NAME}"
                    // Ensure requirements.txt exists, even if empty, for pip to run
                    sh "${env.VIRTUAL_ENV_NAME}/bin/pip install -r requirements.txt"
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'Running unit tests...'
                    sh "${env.VIRTUAL_ENV_NAME}/bin/python -m unittest test_app.py"
                }
            }
        }

        // New Stage: Deploy to Staging
        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploying application to simulated staging environment: ${env.STAGING_DIR}"
                    // Create the staging directory if it doesn't exist
                    sh "mkdir -p ${env.STAGING_DIR}"
                    // Copy application files to the staging directory
                    sh "cp app.py ${env.STAGING_DIR}/"
                    sh "cp requirements.txt ${env.STAGING_DIR}/"
                    sh "cp test_app.py ${env.STAGING_DIR}/" // Copy test file too if needed for staging tests
                    echo "Files copied to staging. Simulating application run in staging..."
                    // Simulate running the application from the staging directory
                    // This demonstrates that the deployed code is functional
                    sh "cd ${env.STAGING_DIR} && python3 app.py"
                    echo "Deployment to staging complete."
                }
            }
        }

        // Keep the Cleanup stage (optional, but good practice)
        stage('Cleanup') {
            steps {
                script {
                    echo 'Cleaning up virtual environment...'
                    sh "rm -rf ${env.VIRTUAL_ENV_NAME}"
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Pipeline completed successfully! Application deployed to staging.'
        }
        failure {
            echo 'Pipeline failed. Check the console output for errors.'
        }
    }
}
